name: Check
on:
  pull_request:
    branches:
      - main
      - develop
    # Only run actions when make or update PR.
    types:
      - opened
      - synchronize
# Cancel if workflow is running in the same group.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: read
  id-token: write
  pull-requests: write
jobs:
  setup:
    runs-on: ubuntu-latest
    # Use environment variables registered in Environments Secrets on GitHub.
    environment: mng
    outputs:
      envs_changed_dirs: ${{ steps.get_envs_dirs.outputs.env_dirs }}
    steps:
      ##################################################
      # setup
      ##################################################
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check branch
        run: |
          git branch
          echo "Current branch: ${GITHUB_HEAD_REF:-$GITHUB_REF}"
      - name: Get changed envs files
        uses: dorny/paths-filter@v3
        id: envs_filter
        with:
          filters: .github/envs-path-filter.yml
      - name: Get changed envs directories
        id: get_envs_dirs
        run: |
          ENV_DIRS=()
          if [ ${{ steps.envs_filter.outputs.dev }} == 'true' ]; then
            ENV_DIRS+=("dev")
          fi
          if [ ${{ steps.envs_filter.outputs.mng }} == 'true' ]; then
            ENV_DIRS+=("mng")
          fi
          if [ ${{ steps.envs_filter.outputs.test }} == 'true' ]; then
            ENV_DIRS+=("test")
          fi
          JSON=$(printf "%s " "${ENV_DIRS[@]}" | sed 's/ $//' | jq -R -s -c 'split(" ")')
          echo "env_dirs=${JSON}" >> $GITHUB_OUTPUT
      - name: Debug changed envs directories
        run: |
          echo "Changed directories: ${{ steps.get_envs_dirs.outputs.env_dirs }}"
          echo "dev: ${{ steps.envs_filter.outputs.dev }}"
          echo "mng: ${{ steps.envs_filter.outputs.mng }}"
          echo "test: ${{ steps.envs_filter.outputs.test }}"
      - name: Upload workspace
        uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: .
          include-hidden-files: true
          retention-days: 1

  envs-ci:
    needs: setup
    if: ${{ fromJSON(needs.setup.outputs.envs_changed_dirs)[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        envs_changed_dir: ${{ fromJSON(needs.setup.outputs.envs_changed_dirs) }}
    environment: mng
    steps:
      - name: Debug matrix
        run: |
          echo "Matrix values: ${{ fromJSON(needs.setup.outputs.envs_changed_dirs) }}"
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          aws-region: ap-northeast-1
      - name: Setup aqua
        uses: aquaproj/aqua-installer@v3.0.1
        with:
          aqua_version: v2.28.0
          aqua_opts: ""
        env:
          AQUA_CONFIG: aqua.yaml
          AQUA_DISABLE_COSIGN: true
          AQUA_DISABLE_SLSA: true
      ##################################################
      # TFLint
      ##################################################
      - name: TFlint
        working-directory: terraform/aws/environments/${{ matrix.envs_changed_dir }}
        continue-on-error: true
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tflint --init --config ${{ github.workspace }}/terraform/.tflint.hcl
          tflint --recursive --config ${{ github.workspace }}/terraform/.tflint.hcl --format=checkstyle | \
          reviewdog -f=checkstyle \
                    -name="tflint" \
                    -reporter=github-pr-review \
                    -filter-mode=nofilter \
                    -fail-on-error=false \
                    -level=warning

      ##################################################
      # tfsec
      ##################################################
      - name: tfsec
        uses: tfsec/tfsec-pr-commenter-action@main
        with:
          working_directory: terraform/aws/environments/${{ matrix.envs_changed_dir }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      ##################################################
      # fmt
      ##################################################
      - name: Terraform fmt
        working-directory: terraform/aws/environments/${{ matrix.envs_changed_dir }}
        id: fmt
        continue-on-error: true
        run: terraform fmt -check -recursive # Output a list of filenames whose files are not properly formatted.
      - name: Comment fmt
        if: ${{ steps.fmt.outputs.stdout }} != ''
        uses: actions/github-script@v7
        env:
          FMT: ${{ steps.fmt.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Use tokens automatically generated by Github
          script: |
            const output = `
            #### Terraform fmt ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            <details>
            <summary>Show fmt</summary>
            \n\`\`\`\nterraform/aws/environments/${{ matrix.envs_changed_dir }}/${process.env.FMT}\`\`\`
            </details>`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      ##################################################
      # plan
      ##################################################
      - name: Terraform init
        run: terraform init
        working-directory: terraform/aws/environments/${{ matrix.envs_changed_dir }}
      - name: Terraform plan
        working-directory: terraform/aws/environments/${{ matrix.envs_changed_dir }}
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: tfcmt plan -patch -- terraform plan -no-color -input=false
