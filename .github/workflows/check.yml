name: Check
on:
  # Push or PR作成されたら起動
  pull_request:
    branches: develop
permissions:
  id-token: write
  contents: read
  issues: write # PRにコメントするために追加
env:
  WORKING_DIRECTORY: "terraform/aws/iam/dev"
jobs:
  check:
    runs-on: ubuntu-latest
    # GitHubのEnvironments Secretsから各環境に登録してある環境変数を使用
    environment: dev
      # todo
#     steps:
#       - name: Checkout infra repository
#         uses: actions/checkout@v4
#         with:
#           ref: develop # developブランチをチェックアウト
#       - name: Check Repository
#         run: |
#           echo "This repository"
#           git branch
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
#           aws-region: ap-northeast-1
#       - name: Setup
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.9.0
#       - name: Init
#         run: terraform init
#         working-directory: ${{ env.WORKING_DIRECTORY }}
#       - name: Format
#         id: fmt
#         run: terraform fmt -check -recursive
#         working-directory: ${{ env.WORKING_DIRECTORY }}
#         continue-on-error: true # エラーが出ても止まらないようにする
#       - name: Plan
#         run: terraform plan -no-color
#         working-directory: ${{ env.WORKING_DIRECTORY }}
#         continue-on-error: true # エラーが出ても止まらないようにする

#       # plan結果をGitHubのPRのコメントに出力する
#       - name: Comment PR
#         uses: actions/github-script@v3
#         env:
#           PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }} # Githubが自動生成するトークンを使用
#           script: |
#             const output = `
#             #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
#             #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
#             <details><summary>Show Plan</summary>
#             \`\`\`terraform${process.env.PLAN}\`\`\`
#             </details>`;
#             github.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             });
