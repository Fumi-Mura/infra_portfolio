name: Plan
on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: read
  id-token: write
  pull-requests: write
env:
  WORKING_DIRECTORY: terraform/aws/environments
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      target_dirs: ${{ steps.set_target_dirs.outputs.dirs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check branch
        run: |
          echo "Current branch: ${{ GITHUB.HEAD_REF }}"
          echo "Merge Target Branch: ${{ GITHUB.BASE_REF }}"

      - name: Get changed envs files
        uses: dorny/paths-filter@v3
        id: envs_filter
        with:
          filters: .github/paths-filter/envs-path-filter.yml

      - name: Get changed modules files
        uses: dorny/paths-filter@v3
        id: modules_filter
        with:
          filters: .github/paths-filter/modules-path-filter.yml

      - name: Check changed directories
        run: |
          echo "Changed envs directories: ${{ steps.envs_filter.outputs.changes }}"
          echo "Changed modules directories: ${{ steps.modules_filter.outputs.changes }}"

      - name: Set target directories
        id: set_target_dirs
        run: |
          if [ "${{ steps.modules_filter.outputs.changes }}" != "[]" ]; then
            echo 'dirs=["mng", "prd", "dev"]' >> $GITHUB_OUTPUT
          elif [ "${{ steps.envs_filter.outputs.changes }}" != "[]" ]; then
            echo "dirs=$(echo '${{ steps.envs_filter.outputs.changes }}' | jq -c .)" >> $GITHUB_OUTPUT
          else
            echo "dirs=[]" >> $GITHUB_OUTPUT
          fi

      - name: Upload workspace
        uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: .
          include-hidden-files: true
          retention-days: 1

  plan:
    needs: setup
    if: ${{ fromJSON(needs.setup.outputs.target_dirs)[0] != null }}
    runs-on: ubuntu-latest
    environment: ${{ matrix.target_dir }}
    strategy:
      matrix:
        target_dir: ${{ fromJSON(needs.setup.outputs.target_dirs) }}
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace

      - name: Setup Terraform
        uses: ./.github/actions/setup
        with:
          working_directory: ${{ env.WORKING_DIRECTORY }}/${{ matrix.target_dir }}
          oidc_role_arn: ${{ secrets.OIDC_ROLE_ARN }}

      - name: Terraform plan
        working-directory: ${{ env.WORKING_DIRECTORY }}/${{ matrix.target_dir }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: tfcmt -var target:${{ matrix.target_dir }} plan -patch -- terraform plan -no-color -input=false
