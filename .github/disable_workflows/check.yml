name: Check
on:
  # Only run when Push or make PR
  pull_request:
    branches: develop
permissions:
  id-token: write
  contents: read
  issues: write # Add for comment for PR
env:
  WORKING_DIRECTORY: "terraform/aws/iam/dev"
jobs:
  check:
    runs-on: ubuntu-latest
    # Use environment variables registered in Environments Secrets on GitHub
    environment: dev
    steps:
      - name: Checkout infra repository
        uses: actions/checkout@v4
        with:
          ref: develop # Checkout develop branch
      - name: Check Repository
        run: |
          echo "This repository"
          git branch
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          aws-region: ap-northeast-1
      - name: Setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.0
      - name: Init
        run: terraform init
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Format
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ${{ env.WORKING_DIRECTORY }}
        continue-on-error: true # Don't stop when an error occurs
      - name: Plan
        run: terraform plan -no-color
        working-directory: ${{ env.WORKING_DIRECTORY }}
        continue-on-error: true # Don't stop when an error occurs.

      # Output plan results to GitHub PR comments
      - name: Comment PR
        uses: actions/github-script@v3
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Use tokens automatically generated by Github
          script: |
            const output = `
            #### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`terraform${process.env.PLAN}\`\`\`
            </details>`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
